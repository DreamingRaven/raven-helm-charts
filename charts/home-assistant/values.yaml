# Default values for ha.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @param replicaCount [string] Server deployment replica count
replicaCount: 1

image:
  ## @param image.registry [string] Image container registry
  registry: ghcr.io
  ## @param image.repository [string] Image repository
  repository: home-assistant/home-assistant
  ## @param image.pullPolicy [string] Image pull policy
  pullPolicy: IfNotPresent
  ## @param image.tag [string] Overrides the image tag whose default is the chart appVersion.
  tag: "2024.7.2"

## @param secrets [array] A list of secrets with a list of keys to turn into environment variables, these take precedence over everything else
secrets: []
#- name: ha
#  lookup:
#  - key: dbUsername
#    env: DB_USERNAME
#  - key: dbPassword
#    env: DB_PASSWORD

## @param env [array] Raw helm environment variable settings for static values
env:
- name: SOME_ENV_VAR
  value: "200"

## @param imagePullSecrets [array] Image pull secrets
imagePullSecrets: []
## @param nameOverride [string] Partial name override
nameOverride: ""
## @param fullnameOverride [string] Full name override
fullnameOverride: ""

serviceAccount:
  ## @param serviceAccount.create [string] Specifies whether a service account should be created
  create: true
  ## @param serviceAccount.annotations [object] Annotations to add to the service account
  annotations: {}
  ## @param serviceAccount.name [string] The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""

## @param podAnnotations [object] Pod annotations
podAnnotations: {}

## @param podSecurityContext [object] Pod security context
podSecurityContext: {}
  # fsGroup: 2000
  #
## @param securityContext [object] Security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## @param configMap [object] home assistant configuration
configMap:
  ## @param configMap.key [string] Configmap key whos contents to use as the mounted configuration
  key: configuration.yaml
  ## @param configMap.existingConfigmap [string] Manually managed configmap name to use
  existingConfigMap: ""
  configuration: |
    # Loads default set of integrations. Do not remove.
    default_config:

    # Load frontend themes from the themes folder
    frontend:
      themes: !include_dir_merge_named themes

    # automation: !include automations.yaml
    # script: !include scripts.yaml
    # scene: !include scenes.yaml

    http:
      # setting any local proxy as valid
      # since this will be in k8s cluster
      use_x_forwarded_for: true
      trusted_proxies:
      - 10.0.0.0/8
      - 192.168.0.0/16
      - 172.16.0.0/20

persistence:
  ## @param persistence.enabled [string] If true use persistent volume else use emptyDir
  enabled: false
  ## @param persistence.generatePVC [string] Generate PVC or use existing one does nothing if persistence.enabled is false
  generatePVC: true
  ## @param persistence.storageClass [string] Storage class
  storageClass: ""
  ## @param persistence.annotations [object] Annotations
  annotations: {}
  ## @param persistence.labels [object] Labels
  labels: {}
  ## @param persistence.accessModes [array] Access modes
  accessModes: [ReadWriteOnce]
  ## @param persistence.existingClaim [string] Manually managed PVC name to use
  existingClaim: ""
  ## @param persistence.size [string] Size of the storage for the DB and assets
  size: 8Gi

service:
  ## @param service.type [string] Service type
  type: ClusterIP

## @param ports [array] Ports to expose, tie to the service, and ingress
ports:
- name: http
  containerPort: 8123
  servicePort: 80
  protocol: TCP

ingress:
  ## @param ingress.enabled [string] Enable ingress
  enabled: false
  ## @param ingress.className [string] Ingress class
  className: ""
  ## @param ingress.annotations [object] Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ## @param ingress.hosts [array] Ingress hosts
  hosts:
    - host: ha.org.example
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls [array] Ingress TLS
  tls: []
  #  - secretName: ha.org.example-tls
  #    hosts:
  #      - ha.org.example

## @param resources [object] Resources
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

netpol:
  enabled: true

autoscaling:
  ## @param autoscaling.enabled [string] Enable autoscaling
  enabled: false
  ## @param autoscaling.minReplicas [string] Minimum number of replicas
  minReplicas: 1
  ## @param autoscaling.maxReplicas [string] Maximum number of replicas
  maxReplicas: 3
  ## @param autoscaling.targetCPUUtilizationPercentage [string] Target CPU utilization percentage
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## @param nodeSelector [object] Node selector
nodeSelector: {}

## @param tolerations [array] Tolerations
tolerations: []

## @param affinity [object] Node affinity
affinity: {}


## @param controller.initContainers Add additional init containers to the ha deployment
initContainers:
# this init container is responsible for copying the configmap to the deployment volume
# - name: init-config
#   image: alpine:latest
#   command:
#   - sh
#   - -c
#   - |
#     cp /configuration.yaml /config/configuration.yaml
#   volumeMounts:
#   - name: config-dir
#     mountPath: /config
#   - name: config
#     mountPath: /configuration.yaml
#     subPath: configuration.yaml
