# Default values for corvid.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ## @param image.registry [string] Image container registry
  registry: docker.io
  ## @param image.repository [string] Image repository
  repository: bitnami/kubectl
  ## @param image.pullPolicy [string] Image pull policy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.32.2"

persistence:
  enabled: true
  size: 8Gi
  accessModes:
  - ReadWriteOnce
  existingClaim: ""

command:
args:
runtimeClassName:

deployment:
  # -- rollout strategy `Recreate` or `RollingUpdate` this chart defaults to Recreate only if we detect a single replica with a volume
  strategy: ""

cron:
  # -- enable or disable cronjob
  enabled: false
  # -- schedule for cronjob using Cron syntax https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax
  schedule: "@midnight"
  # -- cronjob will not trigger on schedule but can be manually triggered
  suspend: false
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  backoffLimit: 3
  concurrencyPolicy: Allow # Allow, Forbid, Replace

## @param initContainers add bespoke init containers to the pod spec
initContainers:
# - name: some-pod-name
#   image: some-image
#   imagePullPolicy: Always
#   ports:
#     - name: some-port
#       containerPort: 1234

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## @param secrets [array] A list of secrets with a list of keys to turn into environment variables, these take precedence over everything else
secrets: []
#- name: corvid
#  lookup:
#  - key: corvidUsername
#    env: corvid_USERNAME
#  - key: corvidPassword
#    env: corvid_PASSWORD

## @param env [array] Raw helm environment variable settings for static or dynamic values
env:
- name: CORVID_EXAMPLE_VARIABLE
  value: "false"

## @param envFrom [array] Raw container envFrom https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#container-v1-core
envFrom:
- configMapRef:
    name: someConfigMap
    optional: false
- secretRef:
    name: someSecret
    optional: false


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

# -- enable or disable podSecurityContext entirely
podSecurityContextEnabled: true
# -- default podSecurityContext if none specified
podSecurityContextDefault:
  fsGroup: 1000
# -- podSecurityContext for consumer overrides
podSecurityContext: {}
  # fsGroup: 1000

# -- enable or disable securityContext entirely
securityContextEnabled: true
# -- default securityContext if none specified
securityContextDefault:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
# -- securityContext for consumer overrides
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  ## @param service.type [string] Service type
  type: ClusterIP

## @param ports [array] Ports to expose, tie to the service, and ingress
ports:
- name: http
  containerPort: 8080
  servicePort: 80
  protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: corvid.org.example
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: corvid.org.example-tls
  #    hosts:
  #      - corvid.org.example

# -- enable or disable resources entirely
resourcesEnabled: true
# -- default resources if not specified by user
resourcesDefault:
  limits:
    memory: 128Mi
  requests:
    cpu: 100m
# -- raw resources block overrides for user
resources:
  # limits:
  #   memory: 128Mi
  # requests:
  #   cpu: 100m

# -- enable or disable startup probe entirely
startupProbeEnabled: true
# -- default startup probe if not specified by user
startupProbeDefault:
  httpGet:
    path: /
    port: http
# -- raw startup probe overrides for user
startupProbe:
  # httpGet:
  #   path: /
  #   port: http

# -- enable or disable liveness probe entirely
livenessProbeEnabled: true
# -- default liveness probe if not specified by user
livenessProbeDefault:
  httpGet:
    path: /
    port: http
# -- raw liveness probe overrides for user
livenessProbe:
  # httpGet:
  #   path: /
  #   port: http

# -- enable or disable readiness probe entirely
readinessProbeEnabled: true
# -- default readiness probe if not specified by user
readinessProbeDefault:
  httpGet:
    path: /
    port: http
# -- raw readiness probe overrides for user
readinessProbe:
  # httpGet:
  #   path: /
  #   port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: kubernetes.io/hostname
#   whenUnsatisfiable: DoNotSchedule # cant benefit from HA on same node
#   labelSelector:
#     matchLabels:
#       app.kubernetes.io/name: corvid-app
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: ScheduleAnyway # can still benefit from HA in zone
#   labelSelector:
#     matchLabels:
#       app.kubernetes.io/name: corvid-app

affinity: {}

netpol:
  enabled: true
