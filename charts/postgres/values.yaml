# Default values for postgres.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

postgres:
  replicaCount: 1

  image:
    registry: docker.io
    repository: library/postgres
    pullPolicy: IfNotPresent
    tag: "17.5"

  persistence:
    enabled: true
    size: 8Gi
    accessModes:
    - ReadWriteOnce
    existingClaim: ""
    defaultVolumeMounts:
    # this defines what volumeMounts to create by default
    # when .Values.persistence.enabled is true
    - name: data # note the default volume is always called data
      mountPath: /var/lib/postgresql/data
      subPath: data

  command:
  args:
  runtimeClassName:

  daemonset:
    enabled: false

  deployment:
    enabled: true
    # -- rollout strategy `Recreate` or `RollingUpdate` this chart defaults to Recreate only if we detect a single replica with a volume
    strategy: ""

  sts:
    enabled: false
    updateStrategy: RollingUpdate

  cron:
    # -- enable or disable cronjob
    enabled: false
    # -- schedule for cronjob using Cron syntax https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax
    schedule: "@midnight"
    # -- cronjob will not trigger on schedule but can be manually triggered
    suspend: false
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
    backoffLimit: 3
    concurrencyPolicy: Allow # Allow, Forbid, Replace

  job:
    enabled: false

  ## @param initContainers Add bespoke init containers to the pods
  initContainers: []
  # - name: some-pod-name
  #   image: some-image
  #   imagePullPolicy: Always
  #   ports:
  #     - name: some-port
  #       containerPort: 1234

  restartPolicy: Always

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  ## @param secrets [array] A list of secrets with a list of keys to turn into environment variables, these take precedence over everything else
  secrets: []
  # - name: postgres
  #   lookup:
  #   - key: postgresUsername
  #     env: postgres_USERNAME
  #   - key: postgresPassword
  #     env: postgres_PASSWORD

  ## @param env [array] Raw helm environment variable settings for static or dynamic values
  env:
  # this ensures the data is in a subdir of our mounted volume to prevent permission issues
  - name: PGDATA
    value: "/var/lib/postgresql/data/pgdata"
  - name: PGPORT
    value: "5432"
  - name: POSTGRES_DB
    value: "postgres"
  - name: POSTGRES_USER
    value: "postgres"
  # These 3 options are required to enable the `scram-sha-256` authentication method
  # otherwise the default `trust` method will be used which enables access without
  # authentication see: https://hub.docker.com/_/postgres#postgres_host_auth_method
  - name: POSTGRES_PASSWORD
    value: "postgres" # <--- PLEASE FOR THE LOVE OF GOD DO NOT USE THIS IN PRODUCTION USE A SECRET ---
  - name: POSTGRES_HOST_AUTH_METHOD
    value: "scram-sha-256"
  - name: POSTGRES_INITDB_ARGS
    value: "--auth-host=scram-sha-256"

  ## @param envFrom [array] Raw container envFrom https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#container-v1-core
  envFrom:
  # - configMapRef:
  #     name: someConfigMap
  #     optional: false
  # - secretRef:
  #     name: someSecret
  #     optional: false


  serviceAccount:
    ## @param serviceAccount.create [string] Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    ## @param serviceAccount.annotations [object] Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.name [string] The name of the service account to use. If not set and create is true, a name is generated using the fullname template
    name: ""

  ## @param podAnnotations [object] Pod annotations
  podAnnotations: {}
  podLabels: {}

  # -- enable or disable podSecurityContext entirely
  podSecurityContextEnabled: true
  # -- default podSecurityContext if none specified
  podSecurityContextDefault:
    fsGroup: 1000
  # -- podSecurityContext for consumer overrides
  podSecurityContext: {}
    # fsGroup: 1000

  # -- enable or disable securityContext entirely
  securityContextEnabled: true
  # -- default securityContext if none specified
  securityContextDefault:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false # postgres likes to create /tmp/tmp.XXX files
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
  # -- securityContext for consumer overrides
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    ## @param service.type [string] Service type
    type: ClusterIP

  ## @param ports [array] Ports to expose, tie to the service, and ingress
  ports:
  - name: postgres
    containerPort: 5432
    servicePort: 5432
    protocol: TCP

  httpRoute:
    enabled: false
    annotations: {}
    parentRefs:
    - name: my-gateway
    hostnames:
    - "postgres.org.example"
    exposedPorts:
    - number: 80

  ingress:
    ## @param ingress.enabled [string] Enable ingress
    enabled: true
    ## @param ingress.className [string] Ingress class
    className: ""
    ## @param ingress.annotations [object] Ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    ## @param ingress.hosts [array] Ingress hosts
    hosts:
      - host: postgres.org.example
        paths:
          - path: /
            pathType: ImplementationSpecific
    ## @param ingress.tls [array] Ingress TLS
    tls: []
    #  - secretName: postgres.org.example-tls
    #    hosts:
    #      - postgres.org.example

  # -- enable or disable resources entirely
  resourcesEnabled: true
  # -- default resources if not specified by user
  resourcesDefault:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
  # -- raw resources block overrides for user
  resources:
    # limits:
    #   memory: 128Mi
    # requests:
    #   cpu: 100m

  # -- enable or disable startup probe entirely
  startupProbeEnabled: false
  # -- default startup probe if not specified by user
  startupProbeDefault:
    httpGet:
      path: /startupz
      port: status
  # -- raw startup probe overrides for user
  startupProbe:
    # httpGet:
    #   path: /
    #   port: http

  # -- enable or disable liveness probe entirely
  livenessProbeEnabled: false
  # -- default liveness probe if not specified by user
  livenessProbeDefault:
    httpGet:
      path: /healthz
      port: status
  # -- raw liveness probe overrides for user
  livenessProbe:
    # httpGet:
    #   path: /
    #   port: http

  # -- enable or disable readiness probe entirely
  readinessProbeEnabled: false
  # -- default readiness probe if not specified by user
  readinessProbeDefault:
    httpGet:
      path: /readyz
      port: status
  # -- raw readiness probe overrides for user
  readinessProbe:
    # httpGet:
    #   path: /
    #   port: http

  autoscaling:
    ## @param autoscaling.enabled [string] Enable autoscaling
    enabled: false
    ## @param autoscaling.minReplicas [string] Minimum number of replicas
    minReplicas: 1
    ## @param autoscaling.maxReplicas [string] Maximum number of replicas
    maxReplicas: 10
    ## @param autoscaling.targetCPUUtilizationPercentage [string] Target CPU utilization percentage
    targetCPUUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: kubernetes.io/hostname
  #   whenUnsatisfiable: DoNotSchedule # cant benefit from HA on same node
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: postgres
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: ScheduleAnyway # can still benefit from HA in zone
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: postgres

  affinity: {}

  netpol:
    enabled: true

  dnsPolicy: "" # default is ClusterFirst
  dnsConfig: {}
    # nameservers:
    # - 1.1.1.1
    # options:
    # - name: ndots
    #   value: "1"
